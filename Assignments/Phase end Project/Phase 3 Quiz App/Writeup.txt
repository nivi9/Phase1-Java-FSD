									WRITEUP FOR ONLINE QUIZ PORTAL APP
									**********************************

Project Agenda:
**************

 To create an online quiz portal with multiple REST APIs where users can browse different quizzes, attempt them, and find their scores and standings.

Description:
************
This project, which aims to create an online quiz application, is based on different REST APIs through which users can log in and take quizzes.
After finishing the quiz, they can find their standing and scores based on their accurate responses.
There are two types of users on this quiz portal: 
•	Admin user 
•	Participants

Project Features:
****************
•	Develop a RESTful Web API to perform CRUD operations on Domain objects as per requirement using Spring Boot and MySQL/Oracle database
•	The admin user has a separate API to access the admin portal, which requires authentication with the admin username and password.
•	The admin user can update the profile details and change the password after using the access token generated by login.
•	The admin user can add questions using the addQuestions API.
•	The admin user can create a quiz by entering quizid and selecting questions with questionid.
•	The admin user can obtain statistics on total quizzes, questions, and users by using their APIs.
•	The admin user can find the users who participated in the quiz along with scores and standings.
•	Users can explore various quizzes created by the admin.
•	Users can create their profile using new user registration.
•	Users can take the quiz and try to answer the questions.
•	Users can also check if the given answers are correct, as well as their results and positions.

Tools Required:
**************
•	Postman
•	Tomcat server
•	MySQL


STEP BY STEP PROCESS:
*********************


Step 1: First you can create the spring started project from that you can add spring web

Step 2: Add the security Dependency in pom.xml file

Step 3: In that Java folder, we can create one pojo classes contains getters,setters,constructors

Step 4: The entities are(name,password,role)

Step 5: You can create one more java classes for CustomAuthenticationProvider in that you have to 

Step 6:  Add some dummy details based on the admin and user.

Step 7: If the authenticatedUser.isPresent() it will perform the conditions.

Step 8: And then config the admin,user credential using @Configuration Annotation ,

Step 9: These are the url we can give at the runtime

                .antMatchers("/").permitAll()
                .antMatchers("/protected").hasRole("USER")
                .antMatchers("/admin").hasRole("ADMIN");


Step 10: Then finaly come to the mapping part,we can map all classes and give some 
	 instruction which is based on the customer perspective.
             
             @RestController    
             @RequestMapping("/")
             @RequestMapping("/protected") 
             @RequestMapping("/admin")

Application.java class you can add that componentScan annotation then give us run.

While running this project you can give the above format.

Register User
*************

    User can register the name,mail,country,...etc then only you can able to access the  quiz competition


Quiz class
************

    Add quizid,questionid and then perform the get and post operation using postman

Question class
**************

    We can perform CRUD operation based on the questions,options and then check all operations

Answer class
************

    add quizid,questionid,answer and then view all the answer then post the correct answer

    It will fully depends on user perspective

Response class
**************

    you can store the user answer and then which questionid and then check the which answer is correct  

    It will show only get and post method




