							WRITEUP FOR USER AUTHENTICATION
							-------------------------------


Background of the problem statement:
************************************

As a part of developing an ecommerce web application, a test-suite is being created to do unit testing of all backend components in the web application. 
This project will test the user authentication class. This project will be a standalone Java application,
since Junit does not directly test servlets or web pages. We are only testing the classes that have the business logic.


-> Email validation is required in nearly every application that has user registration in place.

-> An email address is divided into three main parts: the local part, an @ symbol, and a domain. For example, if “username@domain.com” is an email, then:

  local part = username
  @ = @
  domain = domain.com

-> It can take a lot of effort to validate an email address through string manipulation techniques, as we typically need to count and check all the character types and lengths. But in Java, by using a regular expression, it can be much easier.

-> As we know, a regular expression is a sequence of characters to match patterns. 

Strict Regular Expression Validation:
*************************************

^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$

-> The following restrictions are imposed in the email address' local part by using this regex:

-> It allows numeric values from 0 to 9.

-> Both uppercase and lowercase letters from a to z are allowed.

-> Allowed are underscore “_”, hyphen “-“, and dot “.”

-> Dot isn't allowed at the start and end of the local part.

-> Consecutive dots aren't allowed.

-> For the local part, a maximum of 64 characters are allowed.

JUnit Assert class:
*******************
The org.junit.Assert class provides methods to assert the program logic.

Methods of Assert class:
************************

I wrote test cases in the AuthenticationTest class to verify the emailid and Password:

-> assertTrue: checks that a condition is true. 

-> assertFalse: checks that a condition is false.

-> assertNull: checks that object is null.

-> assertNotNull: checks that object is not null.


